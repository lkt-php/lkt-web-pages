<?php  namespace Lkt\WebPages\Generated; use Lkt\QueryBuilding\SelectBuilder; class LktWebElementSelectBuilder extends SelectBuilder { const COMPONENT = 'lkt-web-element'; const columnId = 'id'; public function andId(?string $as = null): static { return $this->andDatum('id', $as); } public static function id(?string $as = null): static { return static::datum('id', $as); } public function andCountId(?string $as = null): static { return $this->andCountDatum('id', $as); } public static function countId(?string $as = null): static { return static::countDatum('id', $as); } const columnCreatedAt = 'created_at'; public function andCreatedAt(?string $as = null): static { return $this->andDatum('created_at', $as); } public static function createdAt(?string $as = null): static { return static::datum('created_at', $as); } public function andCountCreatedAt(?string $as = null): static { return $this->andCountDatum('created_at', $as); } public static function countCreatedAt(?string $as = null): static { return static::countDatum('created_at', $as); } public function andYearCreatedAt(?string $as = null): static { return $this->andYearDatum('created_at', $as); } public static function yearCreatedAt(?string $as = null): static { return static::yearDatum('created_at', $as); } public function andMonthCreatedAt(?string $as = null): static { return $this->andMonthDatum('created_at', $as); } public static function monthCreatedAt(?string $as = null): static { return static::monthDatum('created_at', $as); } const columnUpdatedAt = 'updated_at'; public function andUpdatedAt(?string $as = null): static { return $this->andDatum('updated_at', $as); } public static function updatedAt(?string $as = null): static { return static::datum('updated_at', $as); } public function andCountUpdatedAt(?string $as = null): static { return $this->andCountDatum('updated_at', $as); } public static function countUpdatedAt(?string $as = null): static { return static::countDatum('updated_at', $as); } public function andYearUpdatedAt(?string $as = null): static { return $this->andYearDatum('updated_at', $as); } public static function yearUpdatedAt(?string $as = null): static { return static::yearDatum('updated_at', $as); } public function andMonthUpdatedAt(?string $as = null): static { return $this->andMonthDatum('updated_at', $as); } public static function monthUpdatedAt(?string $as = null): static { return static::monthDatum('updated_at', $as); } const columnType = 'type'; public function andType(?string $as = null): static { return $this->andDatum('type', $as); } public static function type(?string $as = null): static { return static::datum('type', $as); } public function andCountType(?string $as = null): static { return $this->andCountDatum('type', $as); } public static function countType(?string $as = null): static { return static::countDatum('type', $as); } const columnComponent = 'component'; public function andComponent(?string $as = null): static { return $this->andDatum('component', $as); } public static function component(?string $as = null): static { return static::datum('component', $as); } public function andCountComponent(?string $as = null): static { return $this->andCountDatum('component', $as); } public static function countComponent(?string $as = null): static { return static::countDatum('component', $as); } const columnChildren = 'children'; public function andChildren(?string $as = null): static { return $this->andDatum('children', $as); } public static function children(?string $as = null): static { return static::datum('children', $as); } public function andCountChildren(?string $as = null): static { return $this->andCountDatum('children', $as); } public static function countChildren(?string $as = null): static { return static::countDatum('children', $as); } }