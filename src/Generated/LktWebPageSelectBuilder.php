<?php  namespace Lkt\WebPages\Generated; use Lkt\QueryBuilding\SelectBuilder; class LktWebPageSelectBuilder extends SelectBuilder { const COMPONENT = 'lkt-web-page'; const columnId = 'id'; public function andId(?string $as = null): static { return $this->andDatum('id', $as); } public static function id(?string $as = null): static { return static::datum('id', $as); } public function andCountId(?string $as = null): static { return $this->andCountDatum('id', $as); } public static function countId(?string $as = null): static { return static::countDatum('id', $as); } const columnCreatedAt = 'created_at'; public function andCreatedAt(?string $as = null): static { return $this->andDatum('created_at', $as); } public static function createdAt(?string $as = null): static { return static::datum('created_at', $as); } public function andCountCreatedAt(?string $as = null): static { return $this->andCountDatum('created_at', $as); } public static function countCreatedAt(?string $as = null): static { return static::countDatum('created_at', $as); } public function andYearCreatedAt(?string $as = null): static { return $this->andYearDatum('created_at', $as); } public static function yearCreatedAt(?string $as = null): static { return static::yearDatum('created_at', $as); } public function andMonthCreatedAt(?string $as = null): static { return $this->andMonthDatum('created_at', $as); } public static function monthCreatedAt(?string $as = null): static { return static::monthDatum('created_at', $as); } const columnUpdatedAt = 'updated_at'; public function andUpdatedAt(?string $as = null): static { return $this->andDatum('updated_at', $as); } public static function updatedAt(?string $as = null): static { return static::datum('updated_at', $as); } public function andCountUpdatedAt(?string $as = null): static { return $this->andCountDatum('updated_at', $as); } public static function countUpdatedAt(?string $as = null): static { return static::countDatum('updated_at', $as); } public function andYearUpdatedAt(?string $as = null): static { return $this->andYearDatum('updated_at', $as); } public static function yearUpdatedAt(?string $as = null): static { return static::yearDatum('updated_at', $as); } public function andMonthUpdatedAt(?string $as = null): static { return $this->andMonthDatum('updated_at', $as); } public static function monthUpdatedAt(?string $as = null): static { return static::monthDatum('updated_at', $as); } const columnPublishedAt = 'published_at'; public function andPublishedAt(?string $as = null): static { return $this->andDatum('published_at', $as); } public static function publishedAt(?string $as = null): static { return static::datum('published_at', $as); } public function andCountPublishedAt(?string $as = null): static { return $this->andCountDatum('published_at', $as); } public static function countPublishedAt(?string $as = null): static { return static::countDatum('published_at', $as); } public function andYearPublishedAt(?string $as = null): static { return $this->andYearDatum('published_at', $as); } public static function yearPublishedAt(?string $as = null): static { return static::yearDatum('published_at', $as); } public function andMonthPublishedAt(?string $as = null): static { return $this->andMonthDatum('published_at', $as); } public static function monthPublishedAt(?string $as = null): static { return static::monthDatum('published_at', $as); } const columnStatus = 'status'; public function andStatus(?string $as = null): static { return $this->andDatum('status', $as); } public static function status(?string $as = null): static { return static::datum('status', $as); } public function andCountStatus(?string $as = null): static { return $this->andCountDatum('status', $as); } public static function countStatus(?string $as = null): static { return static::countDatum('status', $as); } const columnName = 'name'; public function andName(?string $as = null): static { return $this->andDatum('name', $as); } public static function name(?string $as = null): static { return static::datum('name', $as); } public function andCountName(?string $as = null): static { return $this->andCountDatum('name', $as); } public static function countName(?string $as = null): static { return static::countDatum('name', $as); } const columnSummary = 'summary'; public function andSummary(?string $as = null): static { return $this->andDatum('summary', $as); } public static function summary(?string $as = null): static { return static::datum('summary', $as); } public function andCountSummary(?string $as = null): static { return $this->andCountDatum('summary', $as); } public static function countSummary(?string $as = null): static { return static::countDatum('summary', $as); } const columnSlug = 'slug'; public function andSlug(?string $as = null): static { return $this->andDatum('slug', $as); } public static function slug(?string $as = null): static { return static::datum('slug', $as); } public function andCountSlug(?string $as = null): static { return $this->andCountDatum('slug', $as); } public static function countSlug(?string $as = null): static { return static::countDatum('slug', $as); } const columnSeoTitle = 'seo_title'; public function andSeoTitle(?string $as = null): static { return $this->andDatum('seo_title', $as); } public static function seoTitle(?string $as = null): static { return static::datum('seo_title', $as); } public function andCountSeoTitle(?string $as = null): static { return $this->andCountDatum('seo_title', $as); } public static function countSeoTitle(?string $as = null): static { return static::countDatum('seo_title', $as); } const columnWebElements = 'web_elements'; public function andWebElements(?string $as = null): static { return $this->andDatum('web_elements', $as); } public static function webElements(?string $as = null): static { return static::datum('web_elements', $as); } public function andCountWebElements(?string $as = null): static { return $this->andCountDatum('web_elements', $as); } public static function countWebElements(?string $as = null): static { return static::countDatum('web_elements', $as); } }